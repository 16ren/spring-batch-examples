<?xml version="1.0" encoding="UTF-8"?>
<!--
    Copyright 2011 Michael R. Lange <michael.r.lange@langmi.de>.
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.
 -->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch-2.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">

    <description>
        Rename Files Tasklet Example: generic version.
        
            - partition step to read multiple files
            - for each file, a specific business key is extracted and provided
              for later file rename tasklet
            - no processor or specific writer config, just read line and write it             
            - max. 2 threads used, see taskExecutor in partitionHandler from partitionStep
    </description>
    <!-- 
        inline xmlns, otherwise it would look like 
        'batch:job, batch:step, etc.' 
    -->
    <job id="renameFilesGenericJob" xmlns="http://www.springframework.org/schema/batch">        
        <step id="renameFilesGenericStep" parent="renameFilesGenericStep:master" />
    </job>

    <step id="concreteRenameFilesGenericStep" xmlns="http://www.springframework.org/schema/batch">
        <tasklet>
            <chunk reader="itemReader" 
                   writer="itemWriter" 
                   commit-interval="5" />
        </tasklet>
        <listeners>
            <listener ref="headerLineCallbackHandler" />
        </listeners>
    </step>

    <bean name="renameFilesGenericStep:master" class="org.springframework.batch.core.partition.support.PartitionStep">
        <property name="jobRepository" ref="jobRepository"/>
        <property name="stepExecutionSplitter">
            <bean class="org.springframework.batch.core.partition.support.SimpleStepExecutionSplitter">
                <constructor-arg ref="jobRepository"/>
                <constructor-arg ref="concreteRenameFilesGenericStep"/>
                <constructor-arg>
                    <bean class="de.langmi.spring.batch.examples.renamefiles.generic.CustomMultiResourcePartitioner" scope="step">
                        <property name="resources" value="#{jobParameters['input.file.pattern']}"/>
                    </bean>
                </constructor-arg>
            </bean>
        </property> 
        <property name="partitionHandler">
            <bean class="org.springframework.batch.core.partition.support.TaskExecutorPartitionHandler">
                <property name="taskExecutor">
                    <bean class="org.springframework.core.task.SimpleAsyncTaskExecutor">
                        <property name="concurrencyLimit" value="2" />
                    </bean>
                </property>
                <property name="step" ref="concreteRenameFilesGenericStep"/>
            </bean>
        </property>
    </bean>

    <bean id="itemReader" class="org.springframework.batch.item.file.FlatFileItemReader" scope="step">
        <description>
            #{stepExecution['fileName']} works because the bean is part of a
            partition step with MultiResourcePartitioner, which promotes the name
            of the used file to the step execution context

            - linesToSkip - count for header lines, set to 1, there is only 1 header line
            - skippedLinesCallback - bean references processes the skipped line(s)
            - simple linemapper
            - strict mode - we expect input files
        </description>
        <property name="resource" value="#{stepExecutionContext['fileName']}" />
        <property name="linesToSkip" value="1" />
        <property name="skippedLinesCallback" ref="headerLineCallbackHandler" />
        <property name="lineMapper">
            <bean class="org.springframework.batch.item.file.mapping.PassThroughLineMapper" />
        </property>
        <property name="strict" value="true" />
    </bean>

    <bean id="headerLineCallbackHandler" class="de.langmi.spring.batch.examples.renamefiles.generic.HeaderLineCallbackHandler">
        <property name="fileNamesMap" ref="fileNamesMap" />
    </bean>

    <bean id="itemWriter" class="org.springframework.batch.item.file.FlatFileItemWriter" scope="step">
        <description>
            #{stepExecution['outputFileName']} works because the bean is part of a
            partition step with MultiResourcePartitioner, which promotes the used
            file to the step execution context
        </description>
        <property name="resource" value="file:target/test-outputs/generic/out-#{stepExecutionContext['outputFileName']}" />
        <property name="lineAggregator">
            <bean class="org.springframework.batch.item.file.transform.PassThroughLineAggregator"/>
        </property>
    </bean>

    <bean id="fileNamesMap" class="java.util.concurrent.ConcurrentHashMap" />

</beans>
